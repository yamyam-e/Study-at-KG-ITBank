package spring.mvc.wedding;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.remoting.support.RemoteInvocationResult;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import spring.mvc.wedding.dto.LogDTO;
import spring.mvc.wedding.dto.PageDTO;
import spring.mvc.wedding.dto.RegistryCartDTO;
import spring.mvc.wedding.dto.RegistryProductDTO;
import spring.mvc.wedding.dto.giftDTO;
import spring.mvc.wedding.dto.gift_cartDTO;
import spring.mvc.wedding.module.FileWorks;
import spring.mvc.wedding.repository.RegistryProductRepository;

@Controller
public class RegistryController {
	
	@Autowired
	private RegistryProductRepository repository;
	
	@Autowired
	private FileWorks fileWorks;
	
	@RequestMapping("regLifeElectronic")
	public ModelAndView regLifeElectronic(ModelMap mmap){
		System.out.println("regLifeElectronic controller....working");
		List<RegistryProductDTO> listc = repository.selectProductByType("생활가전");
		mmap.addAttribute("regLifeElectronic", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regDinningElectronic")
	public ModelAndView regDinningElectronic(ModelMap mmap){
		System.out.println("regDinningElectronic controller....working");
		List<RegistryProductDTO> listc = repository.selectProductByType("주방가전");
		mmap.addAttribute("regDinningElectronic", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regBeautyElectronic")
	public ModelAndView regBeautyElectronic(ModelMap mmap){
		System.out.println("regBeautyElectronic controller....working");
		List<RegistryProductDTO> listc = repository.selectProductByType("뷰티가전");
		System.out.println(listc.toString());
		mmap.addAttribute("regBeautyElectronic", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regSmartElectronic")
	public ModelAndView regSmartElectronic(ModelMap mmap){
		System.out.println("regSmartElectronic controller....working");
		List<RegistryProductDTO> listc = repository.selectProductByType("스마트가전");
		mmap.addAttribute("regSmartElectronic", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regGameElectronic")
	public ModelAndView regGameElectronic(ModelMap mmap){
		System.out.println("regGameElectronic controller….working");
		List<RegistryProductDTO> listc = repository.selectProductByType("게임가전");
		mmap.addAttribute("regGameElectronic", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regDinningTool")
	public ModelAndView regDinningTool(ModelMap mmap){
		System.out.println("regDinningTool controller….working");
		List<RegistryProductDTO> listc = repository.selectProductByType("주방기구");
		mmap.addAttribute("regDinningTool", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regDinningFurniture")
	public ModelAndView dinningFurniture(ModelMap mmap){
		System.out.println("regDinningFurniture controller….working");
		List<RegistryProductDTO> listc = repository.selectProductByType("주방가구");
		mmap.addAttribute("regDinningFurniture", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	@RequestMapping("regInsertProductView")
	public ModelAndView regInsertProductView(ModelMap mmap){
		System.out.println("regInsertProductView…..working");
		List<RegistryProductDTO> listc = repository.selectAll();
		mmap.addAttribute("regSelectAll", listc);
		ModelAndView mav = new ModelAndView("home");
		return mav;
	}
	
	// 가격오름차순 보기
	@RequestMapping("regProductOrderByPriceASC")
	public ModelAndView regProductOrderByPriceASC(
			@RequestParam(value="type", required=false) String type){
		
		List<Object>listc = repository.regProductOrderByPriceASC(type);
		ModelAndView mav = new ModelAndView("home");
		mav.addObject("regProduct_" + type,	listc);
		return mav;
	}
	
	// 가격내림차순 보기
	@RequestMapping("regProductOrderByPriceDESC")
	public ModelAndView regProductOrderByPriceDESC(
			@RequestParam(value="type", required=false) String type){
		
		List<Object>listc = repository.regProductOrderByPriceDESC(type);
		ModelAndView mav = new ModelAndView("home");
		mav.addObject("regProduct_" + type,	listc);
		return mav;
	}
	
	// 이름오름차순 보기
	@RequestMapping("regProductOrderByNameASC")
	public ModelAndView regProductOrderByNameASC(
			@RequestParam(value="type", required=false) String type){
		
		List<Object>listc = repository.regProductOrderByNameASC(type);
		ModelAndView mav = new ModelAndView("home");
		mav.addObject("regProduct_" + type,	listc);
		return mav;
	}
	
	// 이름내림차순 보기
	@RequestMapping("regProductOrderByNameDESC")
	public ModelAndView regProductOrderByNameDESC(
			@RequestParam(value="type", required=false) String type){
		
		List<Object>listc = repository.regProductOrderByNameDESC(type);
		ModelAndView mav = new ModelAndView("home");
		mav.addObject("regProduct_" + type,	listc);
		return mav;
	}
	
	// 상품검색
	@RequestMapping("regProductSearch")
	public ModelAndView regProductSearch(
			 @RequestParam(value="search", required=false) String search,
		     @RequestParam(value="type", required=false) String type,
		     ModelMap mmap){
		
		RegistryProductDTO regDTO = new RegistryProductDTO();
		regDTO.setType(type);
		regDTO.setSearch(search);
		
		List<RegistryProductDTO> listc = repository.regProductSearch(regDTO);
		
		ModelAndView mav = new ModelAndView("home");
		if(listc.size() == 0){
	        mmap.addAttribute("msg", "검색하신" + search + "가 존재하지 않습니다.");
	    }
		mav.addObject("regProduct_" + type,	listc);
		return mav;
	}
	
	// 상품등록
	@RequestMapping(value="regProductBuy", method=RequestMethod.POST)
	public ModelAndView regProductBuy(
			HttpSession session,
			@RequestParam(value="name",required=false) String name,
			@RequestParam(value="type",required=false) String type,
			@RequestParam(value="price",required=false) Integer price,
			@RequestParam(value="buyquantity",required=false) Integer buyquantity,
			@RequestParam(value="quantity", required=false) Integer quantity,
			@RequestParam(value="num", required=false) Integer num,
			ModelMap mmap){
		
		String email = ((LogDTO)session.getAttribute("nowLogin")).getEmail();
		Integer total = price * buyquantity;
		
		String paycheck = "";
	    RegistryCartDTO regcDTO = new RegistryCartDTO(name, email, type, buyquantity, price, total, paycheck);
	    int res = repository.regInsertOneCart(regcDTO);
	    if(res>0){
	       mmap.addAttribute("msg", "레지스트리 목록에 등록되었습니다.");
	    }else{
	       mmap.addAttribute("msg", "실패");
	    }
	    
	    RegistryProductDTO regDTO = new RegistryProductDTO();
	    regDTO.setQuantity(quantity-buyquantity);
	    regDTO.setNum(num);
	     
	    res = repository.regUpdateQuantity(regDTO);
	     
	    List<RegistryProductDTO> listc = repository.selectProductByType(type);
		
		ModelAndView mav = new ModelAndView("home");
		mav.addObject("regProduct_"+type, listc);
		return mav;
	}
	
	// 레지스트리 카트
	@RequestMapping("registryCart")
	public ModelAndView registryCart(HttpSession session, ModelMap mmap){
		
		ModelAndView mav = new ModelAndView("home");
		
		LogDTO dto = (LogDTO)session.getAttribute("nowLogin");
	    if(dto == null){
	    	mav.addObject("registryCart", "registryCart");
	   	  	return mav;
	    }
	     
	    String email = dto.getEmail();
	    String name = dto.getName();
	    mmap.addAttribute("name", name);
	     
	    List<Object>listc = repository.regSelectListCart(email);
	    mav.addObject("registryCart", listc);
		return mav;
	}
	
	
	  
	//registryProduct_system 상품추가
	@RequestMapping(value="regInsertOne", method=RequestMethod.POST)
	public ModelAndView insertOne(ModelMap mmap, 
								  MultipartHttpServletRequest mulRequest, 
								  PageDTO pDTO){
		System.out.println("regInsertOne controller….working");
		
		String name = mulRequest.getParameter("name");
		int price = Integer.parseInt(mulRequest.getParameter("price"));
		String content = mulRequest.getParameter("content");
		int quantity = Integer.parseInt(mulRequest.getParameter("quantity"));
		String type = mulRequest.getParameter("type");
		
		MultipartFile upfile = mulRequest.getFile("upfile");
		String sysname = fileWorks.uploadAndGetSysName(upfile);
		String orgname = upfile.getOriginalFilename();
		
		RegistryProductDTO dto = new RegistryProductDTO(name, price, content, orgname, sysname, type, quantity);
		
		int res = repository.insertOne(dto);
		String msg = null;
		if(res>0){
			msg = "저장 성공";
		} else {
			msg = "저장 실패";
		}
		
		int cntRecord = repository.registryProductListCnt();
		pDTO.pageWorks(cntRecord);
		List<RegistryProductDTO> listc = repository.regProductPageView(pDTO);
		mmap.addAttribute("regSelectAll", listc);
		mmap.addAttribute("pageDTO", pDTO);
		mmap.addAttribute("msg", msg);
		ModelAndView mav = new ModelAndView("home");
		
		return mav;
	}
}