/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.37
 * Generated at: 2016-11-30 11:12:54 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.menu.registry;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class newFriend_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1478948058714L));
    _jspx_dependants.put("jar:file:/C:/Users/SeongkwonMac/Desktop/Spring_Works/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/Spring01_SMVC_Wedding/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<style>\r\n");
      out.write("\t\t.mydatagrid table {\r\n");
      out.write("\t\t\tborder-collapse: collapse;\r\n");
      out.write("\t\t\ttext-align: left;\r\n");
      out.write("\t\t\twidth: 100%;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.mydatagrid {\r\n");
      out.write("\t\t\tfont: normal 12px/150% Arial, Helvetica, sans-serif;\r\n");
      out.write("/*  \t\t\tbackground: rgba(240, 120, 100, 0.1); */\r\n");
      out.write("\t\t\toverflow: hidden;\r\n");
      out.write("\t\t\tborder: 1px solid #F4DA9C;\r\n");
      out.write("\t\t\t-webkit-border-radius: 3px;\r\n");
      out.write("\t\t\t-moz-border-radius: 3px;\r\n");
      out.write("\t\t\tborder-radius: 3px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.mydatagrid table td, .datagrid table th {\r\n");
      out.write("\t\t\tpadding: 3px 10px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.mydatagrid table tbody td {\r\n");
      out.write("\t\t\tcolor: #000000;\r\n");
      out.write("\t\t\tborder-left: 1px solid #F4DA9C;\r\n");
      out.write("\t\t\tfont-size: 12px;\r\n");
      out.write("\t\t\tfont-weight: normal;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.mydatagrid table tbody input {\r\n");
      out.write("\t\t\tborder: 1px solid #F4DA9C;\r\n");
      out.write("\t\t\t-webkit-border-radius: 3px;\r\n");
      out.write("\t\t\t-moz-border-radius: 3px;\r\n");
      out.write("\t\t\tborder-radius: 3px;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.mydatagrid table tbody td:first-child {\r\n");
      out.write("\t\t\tborder-left: none;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t.mydatagrid table tbody tr:last-child td {\r\n");
      out.write("\t\t\tborder-bottom: none;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</style>\r\n");
      out.write("\t<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<form action=\"/wedding/regInsertOneFriend\" method=\"post\">\r\n");
      out.write("\t<div>\r\n");
      out.write("\t<div class=\"mydatagrid\">\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td colspan=\"2\" style=\"text-align: center;\"><h4><strong>새친구 등록</strong></h4></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<br>\r\n");
      out.write("\t<div class=\"mydatagrid\">\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><strong>이 름</strong></td>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"text\" name=\"fName\" required=\"required\" size=\"20\"/>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><strong>이메일</strong></td>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"email\" name=\"fEmail\" required=\"required\"/>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td><strong>핸드폰</strong></td>\r\n");
      out.write("\t\t\t\t\t<td>\r\n");
      out.write("\t\t\t\t\t\t<input type=\"text\" name=\"fPhone\" id=\"phone\" required=\"required\" maxlength=\"13\" size=\"10\"/>\r\n");
      out.write("\t\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("</form>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\t<script type=\"text/javascript\">\r\n");
      out.write("\t  //본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.\r\n");
      out.write("    function execDaumPostcode() {\r\n");
      out.write("        new daum.Postcode({\r\n");
      out.write("            oncomplete: function(data) {\r\n");
      out.write("                // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("                // 도로명 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("                // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("                var fullRoadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("                var extraRoadAddr = ''; // 도로명 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("                // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("                // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("                    extraRoadAddr += data.bname;\r\n");
      out.write("                }\r\n");
      out.write("                // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("                if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("                   extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("                }\r\n");
      out.write("                // 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("                if(extraRoadAddr !== ''){\r\n");
      out.write("                    extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("                }\r\n");
      out.write("                // 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.\r\n");
      out.write("                if(fullRoadAddr !== ''){\r\n");
      out.write("                    fullRoadAddr += extraRoadAddr;\r\n");
      out.write("                }\r\n");
      out.write("\r\n");
      out.write("                // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("                document.getElementById('postcode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("                document.getElementById('roadAddress').value = fullRoadAddr;\r\n");
      out.write("                document.getElementById('jibunAddress').value = data.jibunAddress;\r\n");
      out.write("\r\n");
      out.write("                // 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\r\n");
      out.write("                if(data.autoRoadAddress) {\r\n");
      out.write("                    //예상되는 도로명 주소에 조합형 주소를 추가한다.\r\n");
      out.write("                    var expRoadAddr = data.autoRoadAddress + extraRoadAddr;\r\n");
      out.write("                    document.getElementById('guide').innerHTML = '(예상 도로명 주소 : ' + expRoadAddr + ')';\r\n");
      out.write("\r\n");
      out.write("                } else if(data.autoJibunAddress) {\r\n");
      out.write("                    var expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("                    document.getElementById('guide').innerHTML = '(예상 지번 주소 : ' + expJibunAddr + ')';\r\n");
      out.write("\r\n");
      out.write("                } else {\r\n");
      out.write("                    document.getElementById('guide').innerHTML = '';\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        }).open();\r\n");
      out.write("    }\r\n");
      out.write("\t  \r\n");
      out.write("    function autoHypenPhone(str){\r\n");
      out.write("        str = str.replace(/[^0-9]/g, '');\r\n");
      out.write("        var tmp = '';\r\n");
      out.write("        if( str.length < 4){\r\n");
      out.write("            return str;\r\n");
      out.write("        }else if(str.length < 7){\r\n");
      out.write("            tmp += str.substr(0, 3);\r\n");
      out.write("            tmp += '-';\r\n");
      out.write("            tmp += str.substr(3);\r\n");
      out.write("            return tmp;\r\n");
      out.write("        }else if(str.length < 11){\r\n");
      out.write("            tmp += str.substr(0, 3);\r\n");
      out.write("            tmp += '-';\r\n");
      out.write("            tmp += str.substr(3, 3);\r\n");
      out.write("            tmp += '-';\r\n");
      out.write("            tmp += str.substr(6);\r\n");
      out.write("            return tmp;\r\n");
      out.write("        }else{              \r\n");
      out.write("            tmp += str.substr(0, 3);\r\n");
      out.write("            tmp += '-';\r\n");
      out.write("            tmp += str.substr(3, 4);\r\n");
      out.write("            tmp += '-';\r\n");
      out.write("            tmp += str.substr(7);\r\n");
      out.write("            return tmp;\r\n");
      out.write("        }\r\n");
      out.write("        return str;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\tvar cellPhone = document.getElementById('phone');\r\n");
      out.write("\tphone.onkeyup = function(event){\r\n");
      out.write("\t    event = event || window.event;\r\n");
      out.write("\t    var _val = this.value.trim();\r\n");
      out.write("\t    this.value = autoHypenPhone(_val) ;\r\n");
      out.write("\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
